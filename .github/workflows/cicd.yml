name: CI/CD

on:
  push:
    branches: ['main', 'develop']
    paths-ignore: ['src/resources/**']
  pull_request:
    branches: ['main', 'develop']
    paths-ignore: ['src/resources/**']

jobs:

  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make application-deploy.yaml
        if: contains(github.ref, 'main')
        run: |
          echo "${{ secrets.APPLICATION_DEPLOY }}" > ./src/main/resources/application-deploy.yaml
        shell: bash

      # API E2E 테스트에서 데이터베이스 연결(SSH)을 위한 key 파일
      - name: Create SSH Key File
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BASTION_HOST_KEY }}" > ~/.ssh/bastion-key.pem
          chmod 600 ~/.ssh/bastion-key.pem
        shell: bash

      - name: Make application-test.yaml
        run: |
          mkdir -p ./src/test/resources
          echo "${{ secrets.APPLICATION_TEST }}" > ./src/test/resources/application-test.yaml
        shell: bash

      - name: Grant execute permission for Gradle Wrapper
        run: |
          chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: |
          ./gradlew clean build -x unitTest -x apiE2ETest

      - name: Test with Gradle Wrapper - Unit Test
        run: ./gradlew unitTest

      # API E2E 테스트는 push 이벤트에서만 실행
      - name: Test with Gradle Wrapper - API E2E Test
        if: contains(github.ref, 'main') || contains(github.ref, 'develop')
        run: ./gradlew apiE2ETest

      - name: DockerHub Login
        if: contains(github.ref, 'main')
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Image Build & Push
        if: contains(github.ref, 'main')
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/toty .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/toty

  deploy:
    needs: build
    if: contains(github.ref, 'main')
    runs-on: ubuntu-22.04
    steps:
      - name: Application Run
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo docker kill toty
            sudo docker rm -f toty
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/toty
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/toty
            sudo docker run -p 8080:8080 \
            --name toty \
            -d ${{ secrets.DOCKERHUB_USERNAME }}/toty